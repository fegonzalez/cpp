
@todo optimzar est. datos:  distances  &  previous



  VER:  wikipedia, "Practical optimizations and infinite graphs".



1) pseudocode


DUDA_1: Eficiencia del uso de la est.datos "distances"

	PROBLEMA: ¿Si el grafo es gigante, no es ineficiente
	          inicializar distancia a TODOS?

	Puede que todo el camino sea un subgrafo pequeño.

	OPTIM:  ¿no se pueden ir inicializando solo los nodos por los
	que pase el alg.?


	Map<Vertex, Distance> distances;
	distances.fill(all_nodes, INFINITE)
	distances[start] = 0

	- distances[nodo] = distancia (OPTIMA) TOTAL desde el nodo 'start' 


DUDA_2: Idem DUDA_1 con la est.datos "previous": 

	Map<Vertex, Vertex> previous:  

	- previous[nodo] = nodo previo en el mim. path




##############################################################################


@NiceToHave


\todo  DijkstraDirectedGraph, DijkstraUnirectedGraph

       Versión que no permita pesos negativos al crear ejes.


\todo Tratamiento de errores: 

      ¿Cambiar asserts por excepciones?


\todo Generalizar Función de optimización:   

      Dijstra: Cambiar mimimizar por F_OPTIM = {F_MIN, F_MAX}.:


\todo Generalizar dijstra

      - generalizar TypeDistance en Graph:

         template <typename TypeDistance = double> class BaseGraph;


      - gen. alg. Diksstra(all, all) = for (dijkstra(src_node, dest_node) )


##############################################################################

