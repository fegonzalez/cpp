
# Content
# How to run the tests
# Executing valgrind (memcheck) over the Dijkstra code.



################################################################################
# Content
################################################################################

# sources

  BaseGraph.cc
  BaseGraph.h

	Implementation of Directed/Undirected graphs to be used as
   	inputs for path-finding algorithms.



  Dijkstra.cc
  Dijkstra.h

	Dijkstra algorithm implementation. Using DirectedGraph or
	UndirectedGraph as inputs.



  types.h 

	Basic types of the path_finding library. Types required by the
    	external users of the library (through the library interface)



  path_finding_facade.h  

	Basic path_finding_facade (interface) of the path_finding library. 


# ./test

  ./test/test_as_lib/

	src code & resources for every test of the Dijkstra implementation.
	See its README file.


# makefiles

  Makefile

	make lib: to generate a shared library  (libpathfinding.so)
	


# (DEPRECATED)  scripts/memcheck_to_each_test.sh
	
  Executing valgrind (memcheck) over the Dijkstra code.




################################################################################
# How to run the tests.
################################################################################

See ./test/test_as_lib/README


################################################################################
# Executing valgrind (memcheck) over the Dijkstra code.
################################################################################

(DEPRECATED) 

# (from the console window, at "lib_algorithm" dir)

  ./scripts/memcheck_to_each_test.sh


# memcheck is executed over every test

# For every test_file, a file "vgrind.TEST_FILE_NAME.out" is created
# with the report generated by memcheck.


################################################################################
