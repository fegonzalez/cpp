
##############################################################################

FASE 1.-  probar un algoritmo básico

     COMPLETADA

##############################################################################

FASE 2.-  optimizar y adecuar el algoritmo básico

     COMPLETADA

##############################################################################

FASE 3.- aplicar est. datos del pseudocódigo

     COMPLETADA


##############################################################################

FASE 4 Generalizar Función de optimización


\todo Función de optimización:   

      Dijstra: Cambiar mimimizar por F_OPTIM = {F_MIN, F_MAX}.:

@todo Pasar valgrind

	 13 marzo OK:  No Memory errors
	      	       No Memory leaks


##############################################################################

FASE 5  Llamarlo desde cliente (e.g. MAN)

@todo Pasar valgrind

	 13 marzo OK:  No Memory errors
	      	       No Memory leaks


##############################################################################

FASE 6

\todo  compilar como librería para usarse como COT


##############################################################################


FASE 7 NiceTOHAve


\todo  DijkstraDirectedGraph, DijkstraUnirectedGraph

       Versión que no permita pesos negativos al crear ejes.


\todo Tratamiento de erores: 

      ¿Cambiar asserts por excepciones?


\todo_4 Generalizar dijstra(all, all) = for (dijkstra(src_node, dest_node) )


##############################################################################

