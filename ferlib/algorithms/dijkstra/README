Reference: https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/


##############################################################################

FASE 1.-  probar un algoritmo básico

     COMPLETADA

##############################################################################

FASE 2.-  optimizar y adecuar el algoritmo básico

     COMPLETADA

##############################################################################

FASE 3.- aplicar est. datos del pseudocódigo

- DirectedGraph:  dijstra OK

@bug  UndirectedGrpah: No calcual bien:

       e.g. wikipedia.es:
       Esperado:
       Distance (cost):  20
       Shortest-Path: 1 -> 3 -> 6 -> 5

       Obtenido: 
       Distance (cost): 26
       Shortest-Path:   1 -> 3 -> 5 -> 6


@warning  std::ostream& operator<<(std::ostream &out, 
			   const BaseDijkstraSolution &value)

          imprime inner_ids  => sin acceso a grafo para obneter: get_user_id(id)


@todo Pasar valgrind

	 12 marzo OK:  No Memory errors
	      	       No Memory leaks


##############################################################################

FASE 4 Generalizar Función de optimización


\todo Función de optimización:   std::function<void (int)> func

      Dijstra: Cambiar mimimizar por F_OPTIM = {F_MIN, F_MAX}.:

##############################################################################

FASE 5  Llamarlo desde cliente (e.g. MAN)



##############################################################################

FASE 6


\todo  compilar como librería para usarse como COT


##############################################################################


FASE 7 NiceTOHAve

\todo_4 Generalizar dijstra(all, all) = for (dijkstra(src_node, dest_node) )


\todo  generalize: Graph<V, E, W, F>

       nicetohave: DijkstraGraph: public Graph t.q. no permita pesos
       negtivos.



@WARNING clase Dijkstra requiere template. No funciona la herencia de
las funciones 'shortest...' pq dependen de la impl. interna de las
est. datos (i.e. adj en Fase2)


\todo  
	Dijkstra(G, V, F):  {grafo, initial vertex, optimization function}
	class F que implemente: 
	      operator() 
	      operator<() 
	      >() 
	      ==()
	      <=()
	      >=()

	 class W:  operator() que retorne un valor numérico

	       	   <, >, ==, <=, >=

	
	 En ESE_VIEJO_PRO:  template<class T> class WeightLess  (GraphElements.h)


\todo Cambiar asserts por excepciones?

\todo Pasar valgrind

##############################################################################

