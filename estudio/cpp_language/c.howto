# ==============================================================================
# SUMMARY (following the order in "The ANSI C Programming Language" [3.1] )
# ==============================================================================

# 0 The (C) standard
#

# 1 A Tutorial Introduction
#
# 1.1 Getting Started



# 5 Pointers and Arrays
#
# 5.1 Pointers and Addresses..... 83
# 5.2 Pointers and Function Arguments  84
# 5.3 Pointers and Arrays  87
# 5.4 Address Arithmetic  90
# 5.5 Character Pointers and Functions..... 93
# 5.6 Pointer Arrays; Pointers to Pointers ..... 96
# 5.7 Multi-dimensional Arrays  99
# 5.8 Initialization of Pointer Arrays..... 101
# 5.9 Pointers vs..... Multi-dimensional Arrays..... 101
# 5.10 Command-line Arguments ..... 102
# 5.11 Pointers to Functions 106
# 5.12 Complicated Declarations  108


# Appendix Z - References


# ==============================================================================

Table Index



# ==============================================================================


# ==============================================================================
# 0 The (C) standard
# ==============================================================================

# ==============================================================================
# # 5 Pointers and Arrays
# ==============================================================================

FACT_5_1
An array name is not a variable. It is just a synonym for the location
of the initial element of the array.

[Example]
"int a[10]; "defines an array of size 10, that is, a block of 10 consecutive
objects named a[0] , a[1] , ..., a[9], where a is equivalent to &a[0]
Then, a[i] are variables (they have memory reserved); but 'a' doesn't.


# 5.3 Pointers and Arrays

(1) Any operation that can be achieved by array subscription can also be
    done with pointers.

(2) The pointer version will in general be faster.

    int a[10]; 
    int *pa;

(3) Memory address - equivalent assignments (see [FACT_5_1]):

    pa = &a[0]; // pa contains the address of a[0]
    pa = a;     // pa contains the address of a[0]

    thus, so are:

    &a[i]
    a+i


(4) Value - equivalent assignments:

    a[i]
    *(a+i) 
    
(5) WARNING
There is one difference between an array name and a pointer that must
be kept in mind. A POINTER IS A VARIABLE, so "pa=a" and "pa++" are
legal. But AN ARRAY NAME IS NOT A VARIABLE; constructions like a=pa
and a++ are illegal.


(6) When an array name is passed to a function, what is passed is the
    location of the initial element (a memory address, a pointer)

    (6.1) function parameters - equivalent assignments:
    int f(char *s);     // explicit => preferred
    int f(char s[]);

    int a[5];
    int *pa=a;
    // equivalents
    f(&a[0]);	// OK
    f(a);     	// OK
    f(pa)

    // equivalents
    f(&a[2]);	// OK
    f(a+2);     // OK
    f(pa+2)

# ==============================================================================
# Appendix Z - References
# ==============================================================================


# ------------------------------------------------------------------------------

[1] C++ documents

[1_1] ANSI C standard - ??? 

[1_2] Resource index (compilers, books, ...) - ???

# ------------------------------------------------------------------------------

[2] tools (compilers, debuggers, ...)

[2_1] gcc - https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html


# ------------------------------------------------------------------------------

[3] books

[3.1] The ANSI C Programming Language, Brian W. Kernighan


# ------------------------------------------------------------------------------

[4] C Concepts

# ------------------------------------------------------------------------------

[5] Teacher index

[5_1] Joseph Mansfield - http://stackoverflow.com/users/150634/joseph-mansfield

# ------------------------------------------------------------------------------

[6] C compilation model (**)

# ------------------------------------------------------------------------------

[7] Non-C concepts

[7_1] Memory_address - https://en.wikipedia.org/wiki/Memory_address


# ------------------------------------------------------------------------------

# (*) local copy exists at ./doc_references

# (**) See c++.howto

# ==============================================================================


