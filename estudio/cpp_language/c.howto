# ==============================================================================
# SUMMARY (following the order in "The ANSI C Programming Language" [3.1] )
# ==============================================================================

# 0 The (C) standard
#

# 1 A Tutorial Introduction
#
# 1.1 Getting Started



# 5 Pointers and Arrays
#
# 5.1 Pointers and Addresses
# 5.2 Pointers and Function Arguments
# 5.3 Pointers and Arrays
# 5.4 Address Arithmetic
# 5.5 Character Pointers and Functions
# 5.6 Pointer Arrays; Pointers to Pointers
# 5.7 Multi-dimensional Arrays
# 5.8 Initialization of Pointer Arrays
# 5.9 Pointers vs..... Multi-dimensional Arrays
# 5.10 Command-line Arguments
# 5.11 Pointers to Functions
# 5.12 Complicated Declarations

# H - String manipulation functions

# K - Code examples

# Z - References


# ==============================================================================

Table Index



# ==============================================================================


# ==============================================================================
# 0 The (C) standard
# ==============================================================================

# ==============================================================================
# 5 Pointers and Arrays [k5001] [k5002]
# ==============================================================================

FACT_5_1
An array name is not a variable. It is just a synonym for the location
of the initial element of the array.

[Example]
"int a[10]; "defines an array of size 10, that is, a block of 10 consecutive
objects named a[0] , a[1] , ..., a[9], where 'a' is equivalent to &a[0]
Then, a[i] are variables (they have memory reserved); but 'a' isn't.


# 5.3 Pointers and Arrays [k5001] [k5002]

(1) Any operation that can be achieved by array subscription can also be
    done with pointers.

(2) The pointer version will in general be faster.

    int a[10]; 
    int *pa;

(3) Memory address - equivalent assignments (see [FACT_5_1]):

    pa = &a[0]; // pa contains the address of a[0]
    pa = a;     // pa contains the address of a[0]

    thus, so are:

    &a[i]
    a+i


(4) Value - equivalent assignments:

    a[i]
    *(a+i) 
    
(5) WARNING
There is one difference between an array name and a pointer that must
be kept in mind. A POINTER IS A VARIABLE, so "pa=a" and "pa++" are
legal. But AN ARRAY NAME IS NOT A VARIABLE; constructions like a=pa
and a++ are illegal.


(6) When an array name is passed to a function, what is passed is the
    location of the initial element (a memory address, a pointer) =>
    therefore, the content can be changed.

    (6.1) function parameters - equivalent assignments:
    int f(char *s);     // explicit => preferred
    int f(char s[]);

    int a[5];
    int *pa=a;
    // equivalents
    f(&a[0]);	// OK
    f(a);     	// OK
    f(pa)

    // equivalents
    f(&a[2]);	// OK
    f(a+2);     // OK
    f(pa+2)


[ Example - C modes  [k5001] [k5002]

  void print_c1(char *s, unsigned int len);   // explicit => preferred

  void print_c2(char s[], unsigned int len);  // implicit array => equivalent c1

  void print_c3(char *s); // '\0' expected (undefined behaviour otherwise)

  void print_c4(char s[1000] ); // equivalent, the dimension information
                                // is discarded

  void print_c5(const t_identifier s); // equivalent

  void print_c6(const t_identifier &s); ///@warning NOT equivalent, the
                                        // dimension MUST be exact

  void set_c1(char *s, unsigned int len);   // explicit => preferred

  void set_c2(char s[], unsigned int len);  // implicit array => equivalent c1 

-- end example ]


(7) If one is sure that the elements exist, it is also possible to
    index backwards in an array; p[-1], p[-2], and so on are
    syntactically legal, and refer to the elements that immediately
    precede p[0].

    Of course, it is illegal to refer to objects that are not within
    the array bounds.


# 5.11 Pointers to Functions

(1) In C, a function itself is not a variable, but it is possible to
    define pointers to functions, which can be assigned, placed in
    arrays, passed to functions, returned by functions, and so on.

    [ Example  [4_1_1]

        #include <stdio.h> 
      	// A normal function with an int parameter 
      	// and void return type 
      	void fun(int a) 
      	{ 
      	    printf("Value of a is %d\n", a); 
        } 
  
        int main() 
        { 
            // fun_ptr is a pointer to function fun()  
	    void (*fun_ptr)(int) = &fun; 
  
	    /* The above line is equivalent of following two 
	       void (*fun_ptr)(int); 
	       fun_ptr = &fun;  
	    */
  
            // Invoking fun() using fun_ptr 
            (*fun_ptr)(10); 
  
            return 0; 
        } 

        Output:
            Value of a is 10

    end example ]


(2) passing a pointer to function as a function parameter  (see [3.1].5.11)
 
    [ Example

      // 1. fn. declaration
      //
      void some_fn (int left,
      	 	   int right,
		   int (*comp)(void *, double)
		   )
      {
        ...

        // 2. fn. use
	//
        if ( (*comp)(&left , 7.55) < 0 )
        ...

      }


      // 3. passing the fn. as parameter

      int egfn(void *, double) { /* whatever actions here */ }

      int main()
      { 
         ...
         some_fn(3, 5, egfn);
	 ...
       }

    end example ]


    1. fn. declaration: " int (*comp)(void *, double) "

       comp: is a pointer to a function that:
       	     has one void * argument,
    	     has one double argument,
	     and returns an int.

    2. fn. use: " if ( (*comp)(&left , 7.55) < 0 )"

       comp: is a pointer to a function,
       *comp: is the function, 
       (*comp)(v[i], v[left]): is the call to it.

       The parentheses are needed so the components are correctly associated;
       without them,  " int *comp(void *, void *) " // WRONG
       says that comp is a function returning a pointer to an int,
       which is very different.


(3) Unlike normal pointers, a function pointer points to code, not
    data.  Typically a function pointer stores the start of executable
    code. [4_1_1]

(4) Unlike normal pointers, we do not allocate de-allocate memory
    using function pointers.  [4_1_1]

(5) A function’s name can also be used to get functions’ address.  [4_1_1]

    [ Example

      void fun(int a) { printf("Value of a is %d\n", a); } 
  
      int main() 
      {  
         void (*fun_ptr)(int) = fun;  // & removed 
         fun_ptr(10);  // * removed 
         return 0; 
      }
      
    end example ]
    
(6) Like normal pointers, we can have an array of function pointers.  [4_1_1]

    [ Example

        #include <stdio.h> 
        void add(int a, int b) { printf("Addition is %d\n", a+b); } 
	void subtract(int a, int b) { printf("Subtraction is %d\n", a-b); } 
        void multiply(int a, int b) { printf("Multiplication is %d\n", a*b); } 
  
        int main() 
        { 
           // fun_ptr_arr is an array of function pointers 
    	   void (*fun_ptr_arr[])(int, int) = {add, subtract, multiply}; 
    	   unsigned int ch, a = 15, b = 10; 
  
	   printf("Enter Choice: 0 for add, 1 for subtract and 2 "
                  "for multiply\n"); 
           scanf("%d", &ch); 
  
	   if (ch > 2) return 0; 
  
           (*fun_ptr_arr[ch])(a, b); 
  
           return 0; 
        } 


        Output:

	    Enter Choice: 0 for add, 1 for subtract and 2 for multiply
	    2
	    Multiplication is 150
	    
    end example ]


# ==============================================================================
# H - String manipulation functions
# ==============================================================================

# sscanf: Read formatted data from string (eg. string to int)

  (http://www.cplusplus.com/reference/cstdio/sscanf/?kw=sscanf)

  int sscanf(cosnt char * source, const char * format, ...);


[ Example - sscanf

#include <stdio.h>

int main ()
{
  char sentence []="Rudolph is 12 years old";
  char str [20];
  int i;

  sscanf (sentence,"%s %*s %d",str,&i);
  printf ("%s -> %d\n",str,i);
  
  return 0;
}


/// expected output
//
// Rudolph -> 12

- end example ]



# snprintf: integer to string


# strncpy: Copy characters from string to string

  char * strncpy(char * dest, const char * source, size_t num)
  dest: pointer to dest. array
  source: C string to be copied
  num: MAX. chars to be copied

  WARNING No null-character is implicitly added at the end of 'dest'
  	  if 'source' is longer than 'num'

  (http://www.cplusplus.com/reference/cstring/strncpy/?kw=strncpy)


[ Example - snprintf, strncpy

#include <stdio.h>
#include <string.h>

int main ()
{
  char dest[6];     // non-initialized string
  char dest_bis[6]; // non-initialized string
    
  puts(dest);       // (o1)


  ///@test snprintf: int2string
  //
  int numero = 77;
  char num_aeronaves[2 + 1]; // code + terminating null character
  snprintf(num_aeronaves, 
	       2 + 1, 
	       "%0*d", 
	       2,
 	       numero);
  puts(num_aeronaves);   // (o2)

  ///@test strncpy: (string + '\0') to (string) 
  strncpy ( dest, num_aeronaves, 2 );
  strncpy ( dest_bis, num_aeronaves, 2 );
  
  puts(dest);           // (o3)
  puts(dest_bis);       // (o4)
  
  char tipo_aeronave[4] = {'a','b', 'c', 'd'};
  strncpy ( &dest[2], tipo_aeronave, 4 );

  puts(dest);          // (o5)


  ///@warning iff required.
  dest_bis[3] = '\0';   /* null character manually added */
  puts(dest_bis);       // (o6)

  return 0;
}

/// expected output
//
// (o1) ���4|
// (o2) 77
// (o3) 77��4|
// (o4) 77��4|
// (o5) 77abcd
// (o6) 77

- end example ]


# ==============================================================================
# Appendix K - Code examples (./code_examples)
# ==============================================================================

# Pointers and Arrays "./code_examples/D_arrays"

  [k5001] Passing arrays as function arguments - "./arrays_in_cpp.cpp"
  [k5002] How to return a local array from a C/C++ function? - "./arrays_in_cpp"


# ==============================================================================
# Appendix Z - References
# ==============================================================================


# ------------------------------------------------------------------------------

[1] C documents

[1_1] ANSI C standard - ??? 

[1_2] Resource index (compilers, books, ...) - ???

# ------------------------------------------------------------------------------

[2] tools (compilers, debuggers, ...)

[2_1] gcc - https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html


# ------------------------------------------------------------------------------

[3] books

[3.1] The ANSI C Programming Language, Brian W. Kernighan


# ------------------------------------------------------------------------------

[4] C Concepts

[4_1] Pointers to Functions

      [4_1_1] GeeksforGeeks - Function Pointer in C -
              https://www.geeksforgeeks.org/function-pointer-in-c/

# ------------------------------------------------------------------------------

[5] Teacher index

[5_1] Joseph Mansfield - http://stackoverflow.com/users/150634/joseph-mansfield

# ------------------------------------------------------------------------------

[6] C compilation model (**)

# ------------------------------------------------------------------------------

[7] Non-C concepts

[7_1] Memory_address - https://en.wikipedia.org/wiki/Memory_address


# ------------------------------------------------------------------------------

# (*) local copy exists at ./doc_references

# (**) See c++.howto

# ==============================================================================


